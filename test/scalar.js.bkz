'use strict'

const assert = require('assert');
const common = require('./common.js');
const pgx = common.pgx;

let p = null;
let localSession = null;

before(function() {
  p = pgx.connect(common.baseUrl, common.options).then(function(session) {
    localSession = session;
    return session.readGraphWithProperties(common.graphJson);
  }).then(function(graph) {
    return graph.session.analyst.scc(graph);
  }).then(function(partition) {
    return partition.graph.session.analyst.conductance(partition.graph, {partition: partition, partitionIndex: 0});
  });
});

describe('scalar', function () {
  it('should have a name', function() {
    return p.then(function(scalar) {
      assert(scalar.name);
    });
  });
  it('should have type', function() {
    return p.then(function(scalar) {
      assert(scalar.type);
    });
  });
  it('should have dimension', function() {
    return p.then(function(scalar) {
      assert.equal(0, scalar.dimension);
    });
  });
  it('get should have a value', function() {
    return p.then(function(scalar) {
      return scalar.get();
    }).then(function(result) {
      assert(result === 'Infinity');
    });
  });
  it('set should be 5', function() {
    return p.then(function(scalar) {
      return scalar.set(5);
    }).then(function(scalar) {
      return scalar.get();
    }).then(function(result) {
      assert.equal(5, result);
    });
  });
  it('destroy should remove scalar', function() {
    return p.then(function(scalar) {
      return scalar.destroy();
    }).then(function(result) {
      assert.equal(null, result);
    });
  });
});

after(function() {
  if(localSession){
    localSession.destroy().then(function(result) {
      p = null;
      localSession = null;
    });
  }
});
